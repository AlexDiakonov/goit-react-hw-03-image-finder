{"version":3,"sources":["style.module.css","components/Searchbar.jsx","fetch.js","components/ImageGalleryItem.jsx","components/Button.jsx","components/Spinner.jsx","components/Modal.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Searchbar","state","inputValue","handleInput","e","setState","target","value","onSubmit","preventDefault","props","className","style","SearchForm","this","type","SearchFormButton","SearchFormButtonLabel","onChange","SearchFormInput","placeholder","Component","fetchPics","query","page","axios","get","then","response","data","hits","GalleryItem","src","id","alt","largeUrl","showModal","ImageGalleryItem","onClick","ImageGalleryItemImage","data-url","Button","loadMore","Spinner","spinner","color","height","width","timeout","radius","React","Modal","closeOnKey","code","closeModal","closeOnClick","nodeName","window","addEventListener","Overlay","imgUrl","App","pics","error","loading","searchQuery","largeImgUrl","largeAlt","doFetch","prevState","catch","finally","handleQuerySaver","smoothScroll","scrollTo","top","document","documentElement","scrollHeight","behavior","dataset","url","largeImageURL","prevProps","ImageGallery","map","pic","key","webformatURL","tags","length","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.41428781.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"style_App__1PElp\",\"Searchbar\":\"style_Searchbar__f52P4\",\"SearchForm\":\"style_SearchForm__3p2ik\",\"SearchFormButton\":\"style_SearchFormButton__2tuad\",\"SearchFormButtonLabel\":\"style_SearchFormButtonLabel__3b1Ps\",\"SearchFormInput\":\"style_SearchFormInput__1m_ZR\",\"ImageGallery\":\"style_ImageGallery__25uTC\",\"ImageGalleryItem\":\"style_ImageGalleryItem__1_yQS\",\"ImageGalleryItemImage\":\"style_ImageGalleryItemImage__19WJt\",\"loadMore\":\"style_loadMore__FSrC4\",\"spinner\":\"style_spinner__7Wgy2\",\"Overlay\":\"style_Overlay__csboF\",\"Modal\":\"style_Modal__2Ot8F\"};","import React, { Component } from 'react';\nimport style from '../style.module.css';\nimport PropTypes from 'prop-types';\nexport default class Searchbar extends Component {\n  state = { inputValue: '' };\n\n  handleInput = (e) => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.inputValue);\n    this.setState({ inputValue: '' });\n  };\n  render() {\n    return (\n      <header className={style.Searchbar}>\n        <form className={style.SearchForm} onSubmit={this.onSubmit}>\n          <button type=\"submit\" className={style.SearchFormButton}>\n            <span className={style.SearchFormButtonLabel}>Search</span>\n          </button>\n\n          <input\n            onChange={this.handleInput}\n            className={style.SearchFormInput}\n            placeholder=\"Search images and photos\"\n          />\n        </form>\n      </header>\n    );\n  }\n}\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import axios from 'axios';\n\nconst apiKey = '17924110-c02f67d32060055f35546bb91';\nconst fetchPics = (query, page) => {\n  return axios\n    .get(\n      `https://pixabay.com/api/?key=${apiKey}&q=${query}&page=${page}&per_page=12&image_type=photo`\n    )\n    .then((response) => response.data.hits);\n};\nexport default fetchPics;\n","import React from 'react';\nimport style from '../style.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function GalleryItem({ src, id, alt, largeUrl, showModal }) {\n  return (\n    <li className={style.ImageGalleryItem} onClick={showModal}>\n      <img\n        id={id}\n        className={style.ImageGalleryItemImage}\n        src={src}\n        alt={alt}\n        data-url={largeUrl}\n      />\n    </li>\n  );\n}\nGalleryItem.propTypes = {\n  src: PropTypes.string.isRequired,\n  id: PropTypes.number.isRequired,\n  alt: PropTypes.string.isRequired,\n  largeUrl: PropTypes.string.isRequired,\n  showModal: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport style from '../style.module.css';\nimport PropTypes from 'prop-types';\nexport default function Button({ loadMore }) {\n  return (\n    <button className={style.loadMore} onClick={loadMore}>\n      Load More\n    </button>\n  );\n}\n\nButton.propTypes = { loadMore: PropTypes.func.isRequired };\n","import React from 'react';\nimport Loader from 'react-loader-spinner';\nimport style from '../style.module.css';\nexport default class Spinner extends React.Component {\n  //other logic\n  render() {\n    return (\n      <div className={style.spinner}>\n        <Loader\n          type=\"Rings\"\n          color=\"teal\"\n          height={130}\n          width={130}\n          timeout={7000}\n          radius={400}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport style from '../style.module.css';\nimport PropTypes from 'prop-types';\nexport default class Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.closeOnKey);\n  }\n  closeOnKey = (e) => {\n    if (e.code === 'Escape') {\n      this.props.closeModal();\n    }\n  };\n  closeOnClick = (e) => {\n    if (e.target.nodeName !== 'IMG') {\n      this.props.closeModal();\n    }\n  };\n  render() {\n    return (\n      <div className={style.Overlay} onClick={this.closeOnClick}>\n        <div className={style.Modal}>\n          <img src={this.props.imgUrl} alt={this.props.alt} />\n        </div>\n      </div>\n    );\n  }\n}\nModal.propTypes = {\n  alt: PropTypes.string.isRequired,\n  closeModal: PropTypes.func.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport Searchbar from './components/Searchbar.jsx';\nimport fetchPics from './fetch';\nimport GalleryItem from './components/ImageGalleryItem';\nimport Button from './components/Button';\nimport Spinner from './components/Spinner.jsx';\nimport style from './style.module.css';\nimport Modal from './components/Modal.jsx';\n\nclass App extends Component {\n  state = {\n    pics: [],\n    error: null,\n    loading: false,\n    searchQuery: '',\n    page: 1,\n    showModal: false,\n    largeImgUrl: '',\n    largeAlt: '',\n  };\n\n  doFetch = () => {\n    const { searchQuery, page } = this.state;\n    this.setState({ loading: true });\n    fetchPics(searchQuery, page)\n      .then((pics) =>\n        this.setState((prevState) => ({\n          pics: [...prevState.pics, ...pics],\n          page: prevState.page + 1,\n        }))\n      )\n      .catch((error) => this.setState({ error }))\n      .finally(() => this.setState({ loading: false }));\n  };\n  handleQuerySaver = (query) => {\n    this.setState({ searchQuery: query });\n  };\n  smoothScroll = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n      behavior: 'smooth',\n    });\n  };\n  showModal = (e) => {\n    const largeUrl = e.target.dataset.url;\n    const largeAlt = e.target.alt;\n    this.setState({\n      showModal: true,\n      largeImageURL: largeUrl,\n      largeAlt: largeAlt,\n    });\n  };\n  closeModal = () => {\n    this.setState({ showModal: false, largeImgUrl: '', largeAlt: '' });\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    const prevQuery = prevState.searchQuery;\n    const nextQuery = this.state.searchQuery;\n    if (prevQuery !== nextQuery) {\n      this.setState({ pics: [], page: 1 });\n      this.doFetch();\n    }\n    const prevPage = prevState.page;\n    const nextPage = this.state.page;\n    if (prevPage < nextPage) {\n      this.smoothScroll();\n    }\n  }\n  render() {\n    const { pics, loading, showModal, largeImageURL, largeAlt } = this.state;\n    return (\n      <div className={style.App}>\n        <Searchbar onSubmit={this.handleQuerySaver} />\n        <ul className={style.ImageGallery}>\n          {pics.map((pic) => (\n            <GalleryItem\n              showModal={this.showModal}\n              key={pic.id}\n              id={pic.id}\n              src={pic.webformatURL}\n              alt={pic.tags}\n              largeUrl={pic.largeImageURL}\n            />\n          ))}\n        </ul>\n        {loading && <Spinner />}\n        {pics.length > 0 && <Button loadMore={this.doFetch} />}\n        {showModal && (\n          <Modal\n            closeModal={this.closeModal}\n            imgUrl={largeImageURL}\n            alt={largeAlt}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}